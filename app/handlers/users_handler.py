
# handlers/users_handler.py
import asyncio
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from keyboards.keyboard_users import main_keyboard, cancel_keyboard
from utils.vllm_requests import send_request_to_vllm

router = Router()

user_tasks = {}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class RequestStates(StatesGroup):
    waiting_for_question = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def start(message: Message):
    username = message.from_user.username
    first_name = message.from_user.first_name
    display_name = first_name if first_name else username if username else "—Ç–µ–±—è"

    await message.answer(
        text=(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{display_name}</b>!\n"
            "‚ú® –ï—Å–ª–∏ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ —Ç–≤–æ—è –¥—É—à–∞ –∑–∞–ø—É—Ç–∞–ª–∞—Å—å –ø–æ—Ö–ª–µ—â–µ, —á–µ–º –º–∞–Ω—Ç–∏—è –≤ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–∏ ¬´–õ–µ–≤–∏–∫–æ—Ä–ø—É—Å¬ª, "
            "—Ç–æ —Ç—ã –ø–æ–ø–∞–ª –ø–æ –∞–¥—Ä–µ—Å—É! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –º—É–¥—Ä–µ—Ü—É."
        ),
        parse_mode="HTML",
        reply_markup=main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—Ä–æ—Å –∫ –ú—É–¥—Ä–µ—Ü—É"
# @router.message(F.text == "–ó–∞–ø—Ä–æ—Å –∫ –ú—É–¥—Ä–µ—Ü—É")
@router.callback_query(F.data == "–ó–∞–ø—Ä–æ—Å –∫ –ú—É–¥—Ä–µ—Ü—É")
async def handle_request (callback_query: CallbackQuery, state: FSMContext): #(message: Message, state: FSMContext):
  
    await state.set_state(RequestStates.waiting_for_question)
    await callback_query.message.answer(f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.", reply_markup=cancel_keyboard()) 
    await callback_query.answer()

@router.callback_query(F.data == "–û—Ç–º–µ–Ω–∏—Ç—å")
async def handle_cancel(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    await state.clear()
    await callback_query.message.delete()
    await callback_query.answer()

    if user_id in user_tasks:
        del user_tasks[user_id]

    user_tasks[user_id] = True

    if user_tasks[user_id]:
        await asyncio.sleep(20)
        await callback_query.message.answer_sticker(sticker="CAACAgIAAxkBAAIB3WeH1IytpjEIzihGOYVfHMShJnXCAAJRXQACrnnwSx4pXBauflLrNgQ")
        await callback_query.message.answer("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –∑–∞–±—ã–ª –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ú—É–¥—Ä–µ—Ü–æ–º.", reply_markup=main_keyboard())
        del user_tasks[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—Ä–æ—Å –∫ –ú—É–¥—Ä–µ—Ü—É"
@router.message( RequestStates.waiting_for_question)
async def process_question(message: Message, state: FSMContext):
    user_question = message.text

    sent_message = await message.reply("üí¨")

    try:
        response = await send_request_to_vllm(user_question)
        await sent_message.edit_text(response, reply_markup=main_keyboard())
    except Exception as e:
        await sent_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_keyboard())

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message()
async def handle_any_message(message: Message):
    user_id = message.from_user.id
    # await message.answer(f"{message.sticker.file_id}")

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞, –æ—Ç–º–µ–Ω—è–µ–º –µ–µ
    if user_id in user_tasks:
        try:
            del user_tasks[user_id]  # –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É key:value –ø–æ–ª–Ω–æ—Å—Ç—å—é
        except:
            pass